{"version":3,"sources":["App.jsx","index.jsx"],"names":["SORT_BY_ALPHABET","SORT_BY_LENGTH","REVERSE_ARR","goodsFromServer","App","useState","sortField","setSortField","reverse","setReverse","visibleGoods","goods","preparedGoods","sort","good1","good2","localeCompare","length","getPreparedGoods","className","type","cn","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"iPAKMA,EAAmB,WACnBC,EAAiB,SACjBC,EAAc,YAEPC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UA4BK,IAAMC,EAAM,WACjB,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EA5BR,SAA0BC,EAA1B,GAA0D,IAAvBL,EAAsB,EAAtBA,UAAWE,EAAW,EAAXA,QACtCI,EAAa,YAAOD,GAiB1B,OAfIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKN,EACH,OAAOc,EAAME,cAAcD,GAE7B,KAAKd,EACH,OAAOa,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,EACKI,EAAcJ,UAGhBI,EAMcM,CACnBf,EACA,CAAEG,YAAWE,YAGf,OACE,sBAAKW,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYf,IAAcN,IAE5BsB,QAAS,kBAAMf,EAAaP,IAL9B,iCAUA,wBACEoB,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYf,IAAcL,IAE5BqB,QAAS,kBAAMf,EAAaN,IAL9B,4BAUCO,IAAYN,EACX,wBACEkB,KAAK,SACLD,UAAU,oBACVG,QAAS,kBAAMb,EAAW,KAH5B,qBAQA,wBACEW,KAAK,SACLD,UAAU,6BACVG,QAAS,kBAAMb,EAAWP,IAH5B,sBASc,KAAdI,GAAoBE,IAAYN,IAChC,wBACEkB,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPf,EAAa,IACbE,EAAW,KALf,sBAaJ,6BACGC,EAAaa,KAAI,SAAAC,GAAI,OACpB,oBAEE,UAAQ,OAFV,SAIGA,GAHIA,YC9GjBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6d8d7a23.chunk.js","sourcesContent":["import cn from 'classnames';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport { useState } from 'react';\n\nconst SORT_BY_ALPHABET = 'alphabet';\nconst SORT_BY_LENGTH = 'length';\nconst REVERSE_ARR = 'doReverse';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nfunction getPreparedGoods(goods, { sortField, reverse }) {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_BY_ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_BY_LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (reverse) {\n    return preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState('');\n  const [reverse, setReverse] = useState('');\n  const visibleGoods = getPreparedGoods(\n    goodsFromServer,\n    { sortField, reverse },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortField !== SORT_BY_ALPHABET,\n          })}\n          onClick={() => setSortField(SORT_BY_ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortField !== SORT_BY_LENGTH,\n          })}\n          onClick={() => setSortField(SORT_BY_LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        {reverse === REVERSE_ARR ? (\n          <button\n            type=\"button\"\n            className=\"button is-warning\"\n            onClick={() => setReverse('')}\n          >\n            Reverse\n          </button>\n        ) : (\n          <button\n            type=\"button\"\n            className=\"button is-warning is-light\"\n            onClick={() => setReverse(REVERSE_ARR)}\n          >\n            Reverse\n          </button>\n        )}\n\n        {(sortField !== '' || reverse === REVERSE_ARR) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField('');\n              setReverse('');\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li\n            key={good}\n            data-cy=\"Good\"\n          >\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}